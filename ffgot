#!/usr/bin/env bash
exec 2>>/tmp/forgot_debug.log
set -o pipefail

# Constants
CONFIG_DIR="$HOME/.config/forgot"
DATA_FILE="$CONFIG_DIR/commands.json"
VERSION="1.0.0"
DEFAULT_EDITOR="${EDITOR:-vim}"
DEFAULT_DATA='{
  "git": {
    "description": "Git version control commands",
    "commands": {
      "init": "Initialize a new Git repository",
      "clone": "git clone [url] - Clone a repository",
      "checkout": "git checkout [branch] - Switch branches",
      "remote": {
        "description": "Remote repository operations",
        "commands": {
          "list": "git remote -v - List remote repos",
          "add": "git remote add origin <repository-url>",
          "set-url": "git remote set-url origin https://github.com/username/repo.git"
        }
      }
    }
  },
  "bash": {
    "description": "Bash commands",
    "commands": {
      "ls": {
        "description": "List files and directories",
        "commands": {
          "a": "ls -a - List all files including hidden files",
          "l": "ls -l - List in long format",
          "lh": "ls -lh - List in human-readable format"
        }
      },
      "cd": "cd [directory] - Change directory",
      "mkdir": "mkdir [directory] - Create a new directory",
      "mv": "mv [source] [destination] - Move or rename files or directories"
    }
  },
  "python": {
    "description": "Python programming language",
    "commands": {
      "venv": "python -m venv venv - Create virtual environment",
      "activate": "source venv/bin/activate - Activate virtual environment",
      "pip": {
        "description": "Python package manager",
        "commands": {
          "install": "pip install [package] - Install a package",
          "requirements": "python -m pip install -r requirements.txt - Install requirements"
        }
      },
      "pytest": "python -m pytest - Run tests"
    }
  }
}'

# Colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
YELLOW_BOLD="\033[1;33m"
BLUE="\033[0;34m"
MAGENTA="\033[0;35m"
CYAN="\033[0;36m"
WHITE="\033[0;37m"
BOLD="\033[1m"
UNDERLINE="\033[4m"
RESET="\033[0m"

# Restore terminal on exit
cleanup() {
  tput cnorm  # Show cursor
  #clear
  exit 0
}
trap cleanup EXIT INT TERM

# Check for dependencies
check_dependencies() {
  local missing_deps=()
  
  if ! command -v jq &> /dev/null; then
    missing_deps+=("jq")
  fi
  
  if ! command -v tput &> /dev/null; then
    missing_deps+=("ncurses")
  fi
  
  if [ ${#missing_deps[@]} -gt 0 ]; then
    echo -e "${RED}Error: Missing dependencies: ${missing_deps[*]}${RESET}"
    echo "Please install the required dependencies and try again."
    exit 1
  fi
}

# Initialize the configuration directory and data file
init_config() {
  if [ ! -d "$CONFIG_DIR" ]; then
    mkdir -p "$CONFIG_DIR"
  fi
  
  if [ ! -f "$DATA_FILE" ]; then
    echo "$DEFAULT_DATA" > "$DATA_FILE"
    echo -e "${GREEN}Created default configuration at $DATA_FILE${RESET}"
  fi
}

# Helper function to get data from JSON
get_json_data() {
  local query="$1"
  jq -r "$query" "$DATA_FILE"
}

# Display help menu
show_help() {
  echo -e "${BOLD}${CYAN}forgot${RESET} - Never forget your commands again"
  echo -e "${BOLD}Version:${RESET} $VERSION\n"
  echo -e "${BOLD}USAGE:${RESET}"
  echo -e "  ${CYAN}forgot${RESET}                      Interactive menu"
  echo -e "  ${CYAN}forgot${RESET} ${YELLOW}<topic>${RESET}              Show commands for a specific topic"
  echo -e "  ${CYAN}forgot${RESET} ${YELLOW}<topic>.<command>${RESET}    Show specific command"
  echo -e "  ${CYAN}forgot${RESET} ${YELLOW}<topic>.<cmd>.<subcmd>${RESET}  Show nested command\n"
  
  echo -e "${BOLD}OPTIONS:${RESET}"
  echo -e "  ${CYAN}-h, --help${RESET}             Show this help message"
  echo -e "  ${CYAN}-v, --version${RESET}          Show version information"
  echo -e "  ${CYAN}-e, --edit${RESET}             Edit the commands data file"
  echo -e "  ${CYAN}-i, --import${RESET} ${YELLOW}<file>${RESET}    Import commands from JSON file"
  echo -e "  ${CYAN}-x, --export${RESET} ${YELLOW}<file>${RESET}    Export commands to JSON file\n"
  
  echo -e "${BOLD}INTERACTIVE NAVIGATION:${RESET}"
  echo -e "  ${GREEN}j/k${RESET}                   Move up/down"
  echo -e "  ${GREEN}h/l${RESET}                   Move back/forward in nesting levels"
  echo -e "  ${GREEN}Space${RESET}                 Expand/collapse current selection"
  echo -e "  ${GREEN}Enter${RESET}                 Show details of selected command"
  echo -e "  ${GREEN}q${RESET}                     Quit or go back"
  echo -e "  ${GREEN}Ctrl+n${RESET}                Create new command"
  echo -e "  ${GREEN}Ctrl+d${RESET}                Delete command"
  echo -e "  ${GREEN}Ctrl+u${RESET}                Update command"
}

# Edit the data file
edit_file() {
  $DEFAULT_EDITOR "$DATA_FILE"
}

# Import commands from JSON file
import_commands() {
  local file="$1"
  
  if [ ! -f "$file" ]; then
    echo -e "${RED}Error: File not found: $file${RESET}"
    exit 1
  fi
  
  # Validate JSON
  if ! jq . "$file" > /dev/null 2>&1; then
    echo -e "${RED}Error: Invalid JSON file: $file${RESET}"
    exit 1
  fi
  
  cp "$file" "$DATA_FILE"
  echo -e "${GREEN}Commands imported successfully!${RESET}"
}

# Export commands to JSON file
export_commands() {
  local file="$1"
  
  if [ -z "$file" ]; then
    echo -e "${RED}Error: No output file specified${RESET}"
    exit 1
  fi
  
  cp "$DATA_FILE" "$file"
  echo -e "${GREEN}Commands exported to $file successfully!${RESET}"
}

# Convert user path to internal path (handles missing 'commands' keyword)
convert_path() {
  local user_path="$1"
  local parts
  local result=""
  
  IFS='.' read -ra parts <<< "$user_path"
  
  # First part is always a topic
  result="${parts[0]}"
  
  # For each subsequent part, add .commands. before it
  for ((i=1; i<${#parts[@]}; i++)); do
    result="$result.commands.${parts[$i]}"
  done
  
  echo "$result"
}

# Convert internal path to user-friendly path (removes 'commands' keyword)
internal_to_user_path() {
  local internal_path="$1"
  echo "$internal_path" | sed 's/\.commands\./\./g'
}

strip_commands_suffix() {
  local internal_path="$1"
  
  if [[ "$internal_path" == *.commands ]]; then
    # Remove the .commands suffix
    echo "${internal_path%.commands}"
  else
    # Print the path unchanged
    echo "$internal_path"
  fi
}

# Create a new command
create_command_old() {
  local path="$1"
  local is_nested="$2"
  local current_path=""
  
  # Use current path if exists, otherwise empty
  if [ -n "$path" ]; then
    current_path=".$path"
  fi
  
  # Show cursor during input
  tput cnorm
  
  clear
  echo -e "${CYAN}=== Create New Command ===${RESET}"
  
  # Get command path
  if [ -z "$path" ]; then
    read -p "Topic name: " topic_name
    
    # Check if topic already exists
    if jq -e ".$topic_name" "$DATA_FILE" > /dev/null 2>&1; then
      read -p "Topic already exists. Create a command under this topic? (y/n): " create_under
      if [ "$create_under" == "y" ]; then
        read -p "Command name: " command_name
        current_path=".$topic_name.commands.$command_name"
      else
        echo -e "${YELLOW}Operation cancelled.${RESET}"
        sleep 1
        tput civis  # Hide cursor again
        return
      fi
    else
      # Create new topic
      read -p "Topic description: " topic_description
      
      # Update the JSON file
      local temp_file=$(mktemp)
      jq ".$topic_name = {\"description\": \"$topic_description\", \"commands\": {}}" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      
      echo -e "${GREEN}New topic '$topic_name' created!${RESET}"
      sleep 1
      tput civis  # Hide cursor again
      return
    fi
  else
    # Adding a command to an existing path
    read -p "Command name: " command_name
    current_path="$current_path.$command_name"
  fi
  
  # Ask if this is a nested command with subcommands
  if [ "$is_nested" != "true" ]; then
    read -p "Is this a nested command with subcommands? (y/n): " is_nested_response
    if [ "$is_nested_response" == "y" ]; then
      read -p "Description for nested command: " command_description
      
      # Create nested command structure
      local temp_file=$(mktemp)
      jq "$current_path = {\"description\": \"$command_description\", \"commands\": {}}" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      
      echo -e "${GREEN}New nested command created at $(internal_to_user_path "${current_path:1}")!${RESET}"
    else
      read -p "Command description: " command_description
      
      # Create simple command
      local temp_file=$(mktemp)
      jq "$current_path = \"$command_description\"" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      
      echo -e "${GREEN}New command created at $(internal_to_user_path "${current_path:1}")!${RESET}"
    fi
  else
    # Adding a subcommand to an existing nested command
    read -p "Subcommand description: " subcommand_description
    
    # Create the subcommand
    local temp_file=$(mktemp)
    jq "$current_path = \"$subcommand_description\"" "$DATA_FILE" > "$temp_file"
    mv "$temp_file" "$DATA_FILE"
    
    echo -e "${GREEN}New subcommand created at $(internal_to_user_path "${current_path:1}")!${RESET}"
  fi
  
  sleep 1
  tput civis  # Hide cursor again
}

# Create a new command
create_command() {
  local path="$1"
  local is_nested="$2"
  local current_path=""

  # Use current path if exists, otherwise empty
  if [ -n "$path" ]; then
    current_path=".$path"
  fi

  # Show cursor during input
  tput cnorm

  clear
  echo -e "${CYAN}=== Create New Command ===${RESET}"

  # Get command path
  if [ -z "$path" ]; then
    echo -n "Topic name: "
    read topic_name

    # Check if topic already exists
    if jq -e ".$topic_name" "$DATA_FILE" > /dev/null 2>&1; then
      echo -n "Topic already exists. Create a command under this topic? (y/n): "
      read create_under
      if [ "$create_under" == "y" ]; then
        echo -n "Command name: "
        read command_name
        current_path=".$topic_name.commands.$command_name"
      else
        echo -e "${YELLOW}Operation cancelled.${RESET}"
        sleep 1
        tput civis  # Hide cursor again
        return
      fi
    else
      # Create new topic
      echo -n "Topic description: "
      read topic_description

      # Update the JSON file
      local temp_file
      temp_file=$(mktemp)
      jq ".$topic_name = {\"description\": \"$topic_description\", \"commands\": {}}" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"

      echo -e "${GREEN}New topic '$topic_name' created!${RESET}"
      sleep 1
      tput civis  # Hide cursor again
      return
    fi
  else
    # Adding a command to an existing path
    echo -n "Command name: "
    read command_name
    current_path="$current_path.$command_name"
  fi

  # Ask if this is a nested command with subcommands
  if [ "$is_nested" != "true" ]; then
    echo -n "Is this a nested command with subcommands? (y/n): "
    read is_nested_response
    if [ "$is_nested_response" == "y" ]; then
      echo -n "Description for nested command: "
      read command_description

      # Create nested command structure
      local temp_file
      temp_file=$(mktemp)
      jq "$current_path = {\"description\": \"$command_description\", \"commands\": {}}" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"

      echo -e "${GREEN}New nested command created at $(internal_to_user_path "${current_path:1}")!${RESET}"
    else
      echo -n "Command description: "
      read command_description

      # Create simple command
      local temp_file
      temp_file=$(mktemp)
      jq "$current_path = \"$command_description\"" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"

      echo -e "${GREEN}New command created at $(internal_to_user_path "${current_path:1}")!${RESET}"
    fi
  else
    # Adding a subcommand to an existing nested command
    echo -n "Subcommand description: "
    read subcommand_description

    # Create the subcommand
    local temp_file
    temp_file=$(mktemp)
    jq "$current_path = \"$subcommand_description\"" "$DATA_FILE" > "$temp_file"
    mv "$temp_file" "$DATA_FILE"

    echo -e "${GREEN}New subcommand created at $(internal_to_user_path "${current_path:1}")!${RESET}"
  fi

  sleep 1
  tput civis  # Hide cursor again
}


# Delete a command
delete_command_old() {
  local path="$1"
  
  if [ -z "$path" ]; then
    echo -e "${RED}Error: No path specified for deletion${RESET}"
    return
  fi
  
  # Show cursor during input
  tput cnorm
  
  clear
  echo -e "${CYAN}=== Delete Command ===${RESET}"
  echo -e "You are about to delete: ${YELLOW}$(internal_to_user_path "$path")${RESET}"
  read -p "Are you sure? (y/n): " confirm
  
  if [ "$confirm" == "y" ]; then
    local temp_file=$(mktemp)
    jq "del(.$path)" "$DATA_FILE" > "$temp_file"
    mv "$temp_file" "$DATA_FILE"
    
    echo -e "${GREEN}Command at $(internal_to_user_path "$path") deleted successfully!${RESET}"
  else
    echo -e "${YELLOW}Deletion cancelled.${RESET}"
  fi
  
  sleep 1
  tput civis  # Hide cursor again
}

delete_command() {
  local path="$1"

  if [ -z "$path" ]; then
    echo -e "${RED}Error: No path specified for deletion${RESET}"
    return
  fi

  tput cnorm  # Ensure cursor is visible
  clear

  echo -e "${CYAN}=== Delete Command ===${RESET}"
  echo -e "You are about to delete: ${YELLOW}$(internal_to_user_path "$path")${RESET}"
  
  # Flush output to terminal before asking for input
  echo -n "Are you sure? (y/n): "
  read confirm

  if [ "$confirm" == "y" ]; then
    local temp_file
    temp_file=$(mktemp)
    jq "del(.$path)" "$DATA_FILE" > "$temp_file"
    mv "$temp_file" "$DATA_FILE"
    
    echo -e "${GREEN}Command at $(internal_to_user_path "$path") deleted successfully!${RESET}"
  else
    echo -e "${YELLOW}Deletion cancelled.${RESET}"
  fi

  sleep 1
  tput civis  # Hide cursor again
}




# Update a command
update_command_old() {
  local path="$1"
  
  if [ -z "$path" ]; then
    echo -e "${RED}Error: No path specified for update${RESET}"
    return
  fi
  
  # Show cursor during input
  tput cnorm
  
  clear
  echo -e "${CYAN}=== Update Command ===${RESET}"
  echo -e "Updating: ${YELLOW}$(internal_to_user_path "$path")${RESET}"
  
  # Check if it's a nested command or a simple command
  if jq -e ".$path.description" "$DATA_FILE" > /dev/null 2>&1; then
    # It's a nested command
    current_description=$(jq -r ".$path.description" "$DATA_FILE")
    echo -e "Current description: ${CYAN}$current_description${RESET}"
    read -p "New description (leave empty to keep current): " new_description
    
    if [ -n "$new_description" ]; then
      local temp_file=$(mktemp)
      jq ".$path.description = \"$new_description\"" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      echo -e "${GREEN}Description updated successfully!${RESET}"
    fi
  else
    # It's a simple command
    current_value=$(jq -r ".$path" "$DATA_FILE")
    echo -e "Current value: ${CYAN}$current_value${RESET}"
    read -p "New value (leave empty to keep current): " new_value
    
    if [ -n "$new_value" ]; then
      local temp_file=$(mktemp)
      jq ".$path = \"$new_value\"" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      echo -e "${GREEN}Command updated successfully!${RESET}"
    fi
  fi
  
  sleep 1
  tput civis  # Hide cursor again
}


update_command() {
  local path="$1"

  if [ -z "$path" ]; then
    echo -e "${RED}Error: No path specified for update${RESET}"
    return
  fi

  # Show cursor during input
  tput cnorm

  clear
  echo -e "${CYAN}=== Update Command ===${RESET}"
  echo -e "Updating: ${YELLOW}$(internal_to_user_path "$path")${RESET}"

  # Check if it's a nested command or a simple command
  if jq -e ".$path.description" "$DATA_FILE" > /dev/null 2>&1; then
    # It's a nested command
    local current_description
    current_description=$(jq -r ".$path.description" "$DATA_FILE")
    echo -e "Current description: ${CYAN}$current_description${RESET}"
    
    echo -n "New description (leave empty to keep current): "
    read new_description

    if [ -n "$new_description" ]; then
      local temp_file
      temp_file=$(mktemp)
      jq ".$path.description = \"$new_description\"" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      echo -e "${GREEN}Description updated successfully!${RESET}"
    fi
  else
    # It's a simple command
    local current_value
    current_value=$(jq -r ".$path" "$DATA_FILE")
    echo -e "Current value: ${CYAN}$current_value${RESET}"
    
    echo -n "New value (leave empty to keep current): "
    read new_value

    if [ -n "$new_value" ]; then
      local temp_file
      temp_file=$(mktemp)
      jq ".$path = \"$new_value\"" "$DATA_FILE" > "$temp_file"
      mv "$temp_file" "$DATA_FILE"
      echo -e "${GREEN}Command updated successfully!${RESET}"
    fi
  fi

  sleep 1
  tput civis  # Hide cursor again
}


# Display a specific command or topic directly
show_direct_path() {
  local user_path="$1"
  local path=$(convert_path "$user_path")
  local parts
  IFS='.' read -ra parts <<< "$user_path"
  
  # Direct access to full path
  if jq -e ".$path" "$DATA_FILE" > /dev/null 2>&1; then
    clear
    local result=$(jq -r ".$path" "$DATA_FILE")
    
    # If it's an object with description and commands
    if jq -e ".$path.description" "$DATA_FILE" > /dev/null 2>&1; then
      local description=$(jq -r ".$path.description" "$DATA_FILE")
      echo -e "${BOLD}${CYAN}${parts[-1]}${RESET} - ${description}\n"
      
      # Display commands
      echo -e "${BOLD}Commands:${RESET}"
      jq -r ".$path.commands | keys[]" "$DATA_FILE" | while read -r cmd; do
        local cmd_value=$(jq -r ".$path.commands.\"$cmd\"" "$DATA_FILE")
        
        # Check if this is a nested command
        if jq -e ".$path.commands.\"$cmd\".description" "$DATA_FILE" > /dev/null 2>&1; then
          local nested_desc=$(jq -r ".$path.commands.\"$cmd\".description" "$DATA_FILE")
          echo -e "  ${YELLOW}$cmd${RESET} - ${nested_desc} ${CYAN}[nested]${RESET}"
        else
          echo -e "  ${YELLOW}$cmd${RESET} - ${cmd_value}"
        fi
      done
    else
      # It's a simple command
      echo -e "${BOLD}${CYAN}${parts[-1]}${RESET}\n"
      echo -e "${result}"
    fi
    
    # Show cursor for input
    tput cnorm
    
    echo -e "\nPress any key to exit..."
    read -n 1 -s
  else
    echo -e "${RED}Path not found: $user_path${RESET}"
    exit 1
  fi
}

# Function to redraw the screen without flashing
redraw_screen() {
  local current_path="$1"
  local selected_index="$2"
  local items=("${!3}")
  local descriptions=("${!4}")
  local is_nested=("${!5}")
  local expanded=("${!6}")
  
  # Clear screen but preserve content
  tput clear
  
  # Display path
  if [ -z "$current_path" ]; then
    echo -e "${BOLD}${CYAN}FORGOT - Main Menu${RESET}\n"
  else
    local path_display=$(internal_to_user_path "$current_path" | sed 's/\./  >  /g')
    echo -e "${BOLD}${CYAN}FORGOT${RESET}${BLUE}  >  $path_display${RESET}\n"
    
    # Show description if available
    if jq -e ".$current_path.description" "$DATA_FILE" > /dev/null 2>&1; then
      local desc=$(jq -r ".$current_path.description" "$DATA_FILE")
      echo -e "${CYAN}$desc${RESET}\n"
    fi
  fi
  
  # Display help line
  echo -e "${BOLD}Navigation:${RESET} ${GREEN}j/k${RESET}:up/down ${GREEN}h${RESET}:back ${GREEN}l${RESET}:forward ${GREEN}space${RESET}:expand ${GREEN}q${RESET}:quit ${GREEN}^n${RESET}:new ${GREEN}^d${RESET}:delete ${GREEN}^u${RESET}:update\n"
  
  # Display menu items
  for i in "${!items[@]}"; do
    if [ $i -eq $selected_index ]; then
      # Selected item
      if [ "${is_nested[$i]}" == "true" ]; then
        # Check if expanded
        if [[ " ${expanded[@]} " =~ " $i " ]]; then
          echo -e " ${BOLD}${MAGENTA}▼ ${items[$i]}${RESET} - ${descriptions[$i]}"
          
          # Show child items
          local child_path="$current_path.commands.${items[$i]}"
          if [ -z "$current_path" ]; then
            child_path="${items[$i]}.commands"
          fi
          
          # Get child items
          while IFS= read -r child; do
            # Check if child is nested
            if jq -e ".$child_path.\"$child\".description" "$DATA_FILE" > /dev/null 2>&1; then
              local child_desc=$(jq -r ".$child_path.\"$child\".description" "$DATA_FILE")
              echo -e "   ${CYAN}$child${RESET} - ${child_desc} ${BLUE}[nested]${RESET}"
            else
              local child_value=$(jq -r ".$child_path.\"$child\"" "$DATA_FILE")
              echo -e "   ${CYAN}$child${RESET} - ${child_value}"
            fi
          done < <(jq -r ".$child_path | keys[]" "$DATA_FILE")
        else
          echo -e " ${YELLOW}▶ ${BOLD}${items[$i]}${RESET} - ${descriptions[$i]}"
        fi
      else
        echo -e " ${YELLOW_BOLD}  ${items[$i]}${RESET} - ${descriptions[$i]}"
      fi
    else
      # Non-selected items
      if [ "${is_nested[$i]}" == "true" ]; then
        echo -e " ${BLUE}▶ ${items[$i]}${RESET} - ${descriptions[$i]}"
      else
        echo -e "   ${items[$i]} - ${descriptions[$i]}"
      fi
    fi
  done
}

# Interactive menu
display_menu() {
  local current_path="$1"
  local selected_index="$2"

  local items=()
  local descriptions=()
  local is_nested=()
  local parent_path=""
  local path_history=() # For tracking path path_history
  local selected_index_history=()
  # Function to populate menu items
  populate_menu() {
    items=()
    descriptions=()
    is_nested=()
    
    if [ -z "$current_path" ]; then
      # Top level - show all topics
      while IFS= read -r item; do
        items+=("$item")
        descriptions+=("$(jq -r ".$item.description" "$DATA_FILE")")
        is_nested+=("true")
      done < <(jq -r "keys[]" "$DATA_FILE")
    else
      # Get parent path for navigation
      parent_path=$(echo "$current_path" | sed 's/\.[^.]*$//')
      
      # Check if current path has commands
      if jq -e ".$current_path.commands" "$DATA_FILE" > /dev/null 2>&1; then
        while IFS= read -r item; do
          items+=("$item")
          
          # Check if this item is nested
          if jq -e ".$current_path.commands.\"$item\".description" "$DATA_FILE" > /dev/null 2>&1; then
            descriptions+=("$(jq -r ".$current_path.commands.\"$item\".description" "$DATA_FILE")")
            is_nested+=("true")
          else
            descriptions+=("$(jq -r ".$current_path.commands.\"$item\"" "$DATA_FILE")")
            is_nested+=("false")
          fi
        done < <(jq -r ".$current_path.commands | keys[]" "$DATA_FILE")
      fi
    fi
  }
  
  # Populate initial menu
  populate_menu
  
  # Interactive loop
  local running=true
  local expanded=()
  
  # Initialize the terminal
  tput civis  # Hide cursor
  
  while $running; do
    redraw_screen "$current_path" "$selected_index" items[@] descriptions[@] is_nested[@] expanded[@]
    
    # Get key press
    read -s -n 1 key
    
    # Special keys (arrow keys, etc.)
    if [[ $key == $'\e' ]]; then
      read -s -n 2 -t 0.1 rest
      key=$key$rest
    fi
    
    # Handle key press
    case "$key" in
      j|$'\e[B')  # Down arrow or j
        (( selected_index < ${#items[@]} - 1 )) && ((selected_index++))
        ;;
      k|$'\e[A')  # Up arrow or k
        (( selected_index > 0 )) && ((selected_index--))
        ;;
      h|$'\e[D')  # Left arrow or h (back)

        if [ -n "$current_path" ]; then # if current path is not empty
          echo "OLD CURRENT_PATH: $current_path" >> "current_path.txt"
          if [ "$current_path" == "$parent_path" ]; then # at the top level of commands for the topic
            display_menu "" "${selected_index_history[-1]}"
            unset 'selected_index_history[-1]' # pops the last index
          else
            current_path=$(strip_commands_suffix "$parent_path")
            populate_menu
            selected_index="${selected_index_history[-1]}"
            unset 'selected_index_history[-1]' # pops the last index
            expanded=()
            echo "NEW CURRENT_PATH: $current_path" >> "current_path.txt"
            echo "PARENT_PATH: $current_path" >> "parent_path.txt"
          fi
        fi
        ;;
      l|$'\e[C')  # Right arrow or l (forward)
        echo "$selected_index" >> "selected_index.txt"
        if [ "${is_nested[$selected_index]}" == "true" ]; then # has subcommands
        # -z in square brackets is a test for empty string
          if [ -z "$current_path" ]; then # at top level (haven't even selected a topic yet)
            current_path="${items[$selected_index]}"
          else
            current_path="$current_path.commands.${items[$selected_index]}"
          fi
          path_history+=("$current_path")
          populate_menu
          selected_index_history+=("$selected_index")
          selected_index=0
          expanded=()
        fi
        ;;
      " ")  # Space (expand/collapse)
        if [ "${is_nested[$selected_index]}" == "true" ]; then
            found=false

            for item in "${expanded[@]}"; do
              if [[ "$item" == "$selected_index" ]]; then
                found=true
                break
              fi
            done

            if $found; then
              # Remove $selected_index from array
              new_expanded=()
              for item in "${expanded[@]}"; do
                if [[ "$item" != "$selected_index" ]]; then
                  new_expanded+=("$item")
                fi
              done
              expanded=("${new_expanded[@]}")
            else
              # Add to expanded
              expanded+=("$selected_index")
            fi
        fi
        ;;
      q)  # Quit
        #if [ -n "$current_path" ]; then
        #  current_path="$parent_path"
        #  populate_menu
        #  selected_index=0
        #  expanded=()
        #else
        running=false
        exit 0
        #fi
        ;;
      $'\n')  # Enter (show details)
        if [ -n "${items[$selected_index]}" ]; then
          local detail_path="$current_path.commands.${items[$selected_index]}"
          if [ -z "$current_path" ]; then
            detail_path="${items[$selected_index]}"
          fi
          
          clear
          echo -e "${BOLD}${CYAN}${items[$selected_index]}${RESET}\n"
          
          # If it's a nested command
          if [ "${is_nested[$selected_index]}" == "true" ]; then
            local desc=$(jq -r ".$detail_path.description" "$DATA_FILE")
            echo -e "${desc}\n"
            echo -e "${BOLD}Commands:${RESET}"
            jq -r ".$detail_path.commands | keys[]" "$DATA_FILE" | while read -r cmd; do
              local cmd_value=$(jq -r ".$detail_path.commands.\"$cmd\"" "$DATA_FILE")
              
              # Check if this is a nested command
              if jq -e ".$detail_path.commands.\"$cmd\".description" "$DATA_FILE" > /dev/null 2>&1; then
                local nested_desc=$(jq -r ".$detail_path.commands.\"$cmd\".description" "$DATA_FILE")
                echo -e "  ${YELLOW}$cmd${RESET} - ${nested_desc} ${CYAN}[nested]${RESET}"
              else
                echo -e "  ${YELLOW}$cmd${RESET} - ${cmd_value}"
              fi
            done
          else
            local value=$(jq -r ".$detail_path" "$DATA_FILE")
            echo -e "$value"
          fi
          
          # Show cursor for input
          tput cnorm
          
          echo -e "\nPress any key to go back..."
          read -n 1 -s
          
          # Hide cursor again
          tput civis
          
          populate_menu  # Refresh menu after viewing details
        fi
        ;;
      $'\x0e')  # Ctrl+n (new)
        local new_path=""
        if [ -z "$current_path" ]; then
          create_command "" false
        else
          create_command "$current_path.commands" "${is_nested[$selected_index]}"
        fi
        populate_menu  # Refresh menu after creating
        ;;
      $'\x04')  # Ctrl+d (delete)
        if [ -n "${items[$selected_index]}" ]; then
          local delete_path=""
          if [ -z "$current_path" ]; then
            delete_path="${items[$selected_index]}"
          else
            delete_path="$current_path.commands.${items[$selected_index]}"
          fi
          delete_command "$delete_path"
          populate_menu  # Refresh menu after deleting
          if [ $selected_index -ge ${#items[@]} ]; then
            ((selected_index = ${#items[@]} - 1))
          fi
          if [ $selected_index -lt 0 ]; then
            selected_index=0
          fi
        fi
        ;;
      $'\x15')  # Ctrl+u (update)
        if [ -n "${items[$selected_index]}" ]; then
          local update_path=""
          if [ -z "$current_path" ]; then
            update_path="${items[$selected_index]}"
          else
            update_path="$current_path.commands.${items[$selected_index]}"
          fi
          update_command "$update_path"
          populate_menu  # Refresh menu after updating
        fi
        ;;
    esac
  done
}

# Main function
main() {

  check_dependencies
  init_config
  
  # Parse arguments
  case "$1" in
    -h|--help)
      echo "help" >> "command_logs.txt"
      show_help
      ;;
    -v|--version)
      echo -e "${CYAN}forgot${RESET} version ${GREEN}$VERSION${RESET}"
      ;;
    -e|--edit)
      edit_file
      ;;
    -i|--import)
      import_commands "$2"
      ;;
    -x|--export)
      export_commands "$2"
      ;;
    "")
      # No arguments, show interactive menu
      display_menu "" 0
      ;;
    *)
      # Check if it's a path
      if [[ "$1" == *"."* ]]; then
        show_direct_path "$1"
      else
        # Assume it's a topic
        if jq -e ".$1" "$DATA_FILE" > /dev/null 2>&1; then
          display_menu "$1" 0
        else
          echo -e "${RED}Error: Topic not found: $1${RESET}"
          exit 1
        fi
      fi
      ;;
  esac
}

main "$@"